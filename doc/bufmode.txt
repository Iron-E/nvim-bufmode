*bufmode.txt*          Plugin for managing buffers
*bufmode*

Author: Iron-E – https://github.com/Iron-E & https://gitlab.com/Iron_E
Web: https://github.com/Iron-E/bufmode

|bufmode| is a Vim plugin for managing windows. Built-in functionality includes
window selection, window buffer swapping, and window resizing. The plugin is
extensible, allowing additional functionality to be added (see
|bufmode-configuration| below).

==============================================================================
0. Table of Contents                                               *bufmode-toc*

1. Requirements ............ |bufmode-requirements|
2. Usage ................... |bufmode-usage|
3. Setup ................... |bufmode-setup|

==============================================================================
1. Requirements                                           *bufmode-requirements*

- |nvim-libmodal|
	- https://github.com/Iron-E/nvim-libmodal
- |barbar| (optional)
	- https://github.com/romgrk/barbar.nvim
- |bufferline| (optional)
	- https://github.com/akinsho/bufferline.nvim

==============================================================================
2. Usage                                                         *bufmode-usage*

                                          *:BufmodeEnter* *<Plug>(BufmodeEnter)*
Enter |bufmode| with <Leader>b or |:BufmodeEnter|.

Key                                       Use
----------------------------------------  -----------------------------------
<Esc>                                     Leave `bufmode`
`?`                                         Show help message
`^`,`0`,<Home>,<Up>                           Go to beginning of buffer list.
`$`,<End>,<Down>                            Go to end of buffer list.
`b`,`j`,`h`,<Left>,<PageUp>                     Go to buffer left.
`w`,`k`,`l`,<Right>,<PageDown>                  Go to buffer right.
<S-b>,<S-j>,<S-h>,<S-Left>,<S-PageUp>     Move current buffer to the left.
<S-w>,<S-k>,<S-l>,<S-Right>,<S-PageDown>  Move current buffer to the right.
`d`                                         Delete the current buffer.
`f`,`g`,`t`                                     Goto buffer by name.
`p`                                         Pick buffer for current window.
`r`                                         Replace current buffer with new.

==============================================================================
3. Setup                                                         *bufmode-setup*

|bufmode| supports overriding its default settings by using a `setup`
function. To call this function, simply put the following in a |lua| file: >
	require('bufmode').setup {
		first_option = 'first value',
		second_option = 'second value',
		-- …
	}
<

The following section contains the options which may be passed to this
function.

Options~

`boolean`                  (default `false`)                  *bufmode-setup-barbar*
This setting enables additional with the |barbar| plugin. If `true`, certain
|key-mapping|s are overwritten, and others are added.

You can pass this setting to the |bufmode-setup| function like so: >
	require('bufmode').setup {barbar = true}
<

`boolean`                (default `false`)                *bufmode-setup-bufferline*
This setting enables additional with the |bufferline| plugin. If `true`,
certain |key-mapping|s are overwritten, and others are added.

You can pass this setting to the |bufmode-setup| function like so: >
	require('bufmode').setup {bufferline = true}
<

`false|string`          (default "<leader>b")        *bufmode-setup-enter_mapping*
The setting controls what |key-mapping| is used to enter |bufmode|.

You can pass this setting to the |bufmode-setup| function like so: >
	require('bufmode').setup {enter_mapping = '<leader>b'}
<

`table<string, fun()|string>`       (default `{}`)           *bufmode-setup-keymaps*
                                                            *g:bufmode_mappings*
This setting allows you to add or overwrite |key-mapping|s in the |bufmode|.

You can pass this setting to the |bufmode-setup| function like so: >
	require('bufmode').setup {keymaps = {x = 'silent! bdelete'}}
<

Or you can express this setting using a |global-variable|: >
	vim.g.bufmode_mappings = {x = 'silent! bdelete'}
<

==============================================================================
 vim:tw=78:ft=help:norl:
